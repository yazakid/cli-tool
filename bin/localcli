#!/usr/bin/env node
console.log('hello localcli')
require('../src/utils/nodeCheck')
const program = require('commander')
const { init, add, run } = require('../src/index')
const UpdateNotifier = require('update-notifier').UpdateNotifier
const semCmp = require('semver-compare')
const json = require('../package.json')
const chalk = require('chalk')

const boxen = require('boxen')

program.version(require('../package').version).usage('<command> [options]')

program
  .command('init [name]')
  .description('initialize a standard hera project')
  .option('-c, --config_file [file]', 'configfile')
  .action(function (name, options) {
    init(name, options.config_file)
  })

program
  .command('run [platform]')
  .description('run on platform')
  .option('-p, --port [port]', 'port to serve')
  .option('-c, --changeFramework', 'change framework')
  .action(function (platform, options) {
    options.platform = platform.toLowerCase()
    run(platform, options)
  })

program
  .command('add [platform]')
  .description('command for add platform project')
  .action(function (platform, options) {
    add(platform, options.config_file)
  })

// 更新检查方法
var notifier = new UpdateNotifier({
  pkg: json,
  callback: function (err, result) {
    if (err) return
    if (semCmp(result.latest, result.current) > 0) {
      var message =
        'Update available ' +
        chalk.dim(result.current) +
        chalk.reset(' → ') +
        chalk.green(result.latest) +
        ' \nRun ' +
        chalk.cyan('npm i -g ' + json.name) +
        ' to update'
      var msg =
        '\n' +
        boxen(message, {
          padding: 1,
          margin: 1,
          align: 'center',
          borderColor: 'yellow',
          borderStyle: 'round'
        })
      console.log(msg)
    }
  }
})

program.parse(process.argv)

// 执行更新检查
notifier.check()
